{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tan Tai\\\\Desktop\\\\Do An CN\\\\website-movie\\\\src\\\\components\\\\movie-grid\\\\MovieGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport { useParams } from 'react-router-dom';\nimport tmdbApi, { category, movieType, tvType } from '../../Api/tmdbApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalpage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n\n      if (keyword === undefined) {\n        const params = {};\n\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      setItems(response.results);\n      setTotalpage(response.total_pages);\n    };\n\n    getList();\n  }, [props.category, keyword]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-grid\",\n    children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n      category: props.category,\n      item: item\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 31\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MovieGrid, \"YWZLe7IaG4CUGuGMn4GCVU2UHDA=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieGrid;\nexport default MovieGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieGrid\");","map":{"version":3,"names":["React","useState","useEffect","MovieCard","useParams","tmdbApi","category","movieType","tvType","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalpage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTvList","popular","query","search","results","total_pages","map","item","i"],"sources":["C:/Users/Tan Tai/Desktop/Do An CN/website-movie/src/components/movie-grid/MovieGrid.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nimport './movie-grid.scss'\r\nimport MovieCard from '../movie-card/MovieCard'\r\nimport { useParams } from 'react-router-dom';\r\nimport tmdbApi, { category, movieType, tvType } from '../../Api/tmdbApi';\r\n\r\n\r\nconst MovieGrid = props  => {\r\n\r\n  const[items, setItems] = useState([]);\r\n\r\n  const[page, setPage] = useState(1);\r\n  const[totalPage, setTotalpage] = useState(0);\r\n\r\n  const{keyword} = useParams();\r\n\r\n  useEffect(() => {\r\n    const getList = async() => {\r\n      let response = null;\r\n      if(keyword===undefined){\r\n        const params ={};\r\n        switch(props.category){\r\n            case category.movie:\r\n              response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\r\n              break;\r\n            default:\r\n              response = await tmdbApi.getTvList(tvType.popular, {params});\r\n        }\r\n      }else{\r\n        const params = {\r\n          query: keyword\r\n        }\r\n        response = await tmdbApi.search(props.category, {params});\r\n      }\r\n      setItems(response.results);\r\n      setTotalpage(response.total_pages);\r\n    }\r\n    getList();\r\n  }, [props.category, keyword]);\r\n  \r\n  return (\r\n    <div className=\"movie-grid\">\r\n      {\r\n        items.map((item, i)=> <MovieCard category={props.category} item={item} key={i}/>)\r\n      }</div>\r\n  )\r\n}\r\n\r\nexport default MovieGrid"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAO,mBAAP;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,OAAP,IAAkBC,QAAlB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,mBAArD;;;AAGA,MAAMC,SAAS,GAAGC,KAAK,IAAK;EAAA;;EAE1B,MAAK,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAjC;EAEA,MAAK,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,CAAD,CAA/B;EACA,MAAK,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,CAAD,CAAzC;EAEA,MAAK;IAACgB;EAAD,IAAYb,SAAS,EAA1B;EAEAF,SAAS,CAAC,MAAM;IACd,MAAMgB,OAAO,GAAG,YAAW;MACzB,IAAIC,QAAQ,GAAG,IAAf;;MACA,IAAGF,OAAO,KAAGG,SAAb,EAAuB;QACrB,MAAMC,MAAM,GAAE,EAAd;;QACA,QAAOX,KAAK,CAACJ,QAAb;UACI,KAAKA,QAAQ,CAACgB,KAAd;YACEH,QAAQ,GAAG,MAAMd,OAAO,CAACkB,aAAR,CAAsBhB,SAAS,CAACiB,QAAhC,EAA0C;cAACH;YAAD,CAA1C,CAAjB;YACA;;UACF;YACEF,QAAQ,GAAG,MAAMd,OAAO,CAACoB,SAAR,CAAkBjB,MAAM,CAACkB,OAAzB,EAAkC;cAACL;YAAD,CAAlC,CAAjB;QALN;MAOD,CATD,MASK;QACH,MAAMA,MAAM,GAAG;UACbM,KAAK,EAAEV;QADM,CAAf;QAGAE,QAAQ,GAAG,MAAMd,OAAO,CAACuB,MAAR,CAAelB,KAAK,CAACJ,QAArB,EAA+B;UAACe;QAAD,CAA/B,CAAjB;MACD;;MACDT,QAAQ,CAACO,QAAQ,CAACU,OAAV,CAAR;MACAb,YAAY,CAACG,QAAQ,CAACW,WAAV,CAAZ;IACD,CAnBD;;IAoBAZ,OAAO;EACR,CAtBQ,EAsBN,CAACR,KAAK,CAACJ,QAAP,EAAiBW,OAAjB,CAtBM,CAAT;EAwBA,oBACE;IAAK,SAAS,EAAC,YAAf;IAAA,UAEIN,KAAK,CAACoB,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBAAY,QAAC,SAAD;MAAW,QAAQ,EAAEvB,KAAK,CAACJ,QAA3B;MAAqC,IAAI,EAAE0B;IAA3C,GAAsDC,CAAtD;MAAA;MAAA;MAAA;IAAA,QAAtB;EAFJ;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CAvCD;;GAAMxB,S;UAOaL,S;;;KAPbK,S;AAyCN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}